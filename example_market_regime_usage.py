#!/usr/bin/env python3
"""
–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä—ã–Ω–æ—á–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤
–∏ –∑–∞—â–∏—Ç—ã –æ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã—Ö —Å–¥–≤–∏–≥–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ –ø–∞—Ä–Ω–æ–≥–æ —Ç—Ä–µ–π–¥–∏–Ω–≥–∞.
"""

import sys
sys.path.append('src')

import pandas as pd
import numpy as np
from pathlib import Path

from coint2.utils.config import load_config
from coint2.engine.backtest_engine import PairBacktester

def create_sample_data():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏."""
    np.random.seed(42)
    dates = pd.date_range('2023-01-01', periods=1000, freq='D')
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä—è–¥—ã
    price1 = 100 + np.cumsum(np.random.normal(0, 1, 1000))
    
    # –í—Ç–æ—Ä–æ–π –∞–∫—Ç–∏–≤ –∫–æ–∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω —Å –ø–µ—Ä–≤—ã–º + —à—É–º
    price2 = 0.8 * price1 + 20 + np.cumsum(np.random.normal(0, 0.5, 1000))
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–π —Å–¥–≤–∏–≥ –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ –ø–µ—Ä–∏–æ–¥–∞
    price2[500:] += 15  # –°—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–π —Å–¥–≤–∏–≥
    
    data = pd.DataFrame({
        'Y': price1,  # –ü–µ—Ä–≤—ã–π –∞–∫—Ç–∏–≤ (–∑–∞–≤–∏—Å–∏–º–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è)
        'X': price2   # –í—Ç–æ—Ä–æ–π –∞–∫—Ç–∏–≤ (–Ω–µ–∑–∞–≤–∏—Å–∏–º–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è)
    }, index=dates)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—ã –∫–∞–∫ –∏–Ω–¥–µ–∫—Å
    
    return data

def main():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏."""
    print("üöÄ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä—ã–Ω–æ—á–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤ –∏ –∑–∞—â–∏—Ç—ã –æ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã—Ö —Å–¥–≤–∏–≥–æ–≤")
    print("=" * 80)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = load_config('configs/main_2024.yaml')
    print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
    print(f"   - –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤: {config.backtest.market_regime_detection}")
    print(f"   - –ó–∞—â–∏—Ç–∞ –æ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã—Ö —Å–¥–≤–∏–≥–æ–≤: {config.backtest.structural_break_protection}")
    print(f"   - –û–∫–Ω–æ –¥–ª—è Hurst Exponent: {config.backtest.hurst_window}")
    print(f"   - –û–∫–Ω–æ –¥–ª—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏: {config.backtest.correlation_window}")
    print()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    data = create_sample_data()
    print(f"üìä –°–æ–∑–¥–∞–Ω–æ {len(data)} —Ç–æ—á–µ–∫ –¥–∞–Ω–Ω—ã—Ö")
    print(f"   - –ü–µ—Ä–∏–æ–¥: {data.index.min()} - {data.index.max()}")
    print()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±—ç–∫—Ç–µ—Å—Ç–µ—Ä
    backtester = PairBacktester(
        pair_data=data,
        rolling_window=config.backtest.rolling_window,
        z_threshold=config.backtest.zscore_threshold,
        z_exit=config.backtest.zscore_exit or 0.0,
        commission_pct=config.backtest.commission_pct,
        slippage_pct=config.backtest.slippage_pct,
        # –ù–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä—ã–Ω–æ—á–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤
        market_regime_detection=config.backtest.market_regime_detection,
        structural_break_protection=config.backtest.structural_break_protection,
        hurst_window=config.backtest.hurst_window,
        correlation_window=config.backtest.correlation_window,
        min_correlation_threshold=config.backtest.min_correlation_threshold,
        max_half_life_days=config.backtest.max_half_life_days
    )
    
    print("üîÑ –ó–∞–ø—É—Å–∫ –±—ç–∫—Ç–µ—Å—Ç–∞ —Å –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é...")
    backtester.run()
    results = backtester.results
    
    print(f"‚úÖ –ë—ç–∫—Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(results)} –ø–µ—Ä–∏–æ–¥–æ–≤")
    print()
    
    # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print("üìà –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–æ—á–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤:")
    regime_counts = results['market_regime'].value_counts()
    for regime, count in regime_counts.items():
        percentage = (count / len(results)) * 100
        print(f"   - {regime}: {count} –ø–µ—Ä–∏–æ–¥–æ–≤ ({percentage:.1f}%)")
    print()
    
    print("üö® –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã—Ö —Å–¥–≤–∏–≥–æ–≤:")
    structural_breaks = results['structural_break_detected'].sum()
    print(f"   - –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã—Ö —Å–¥–≤–∏–≥–æ–≤: {structural_breaks}")
    if structural_breaks > 0:
        break_indices = results[results['structural_break_detected']].index
        print(f"   - –ò–Ω–¥–µ–∫—Å—ã —Å–¥–≤–∏–≥–æ–≤: {break_indices.tolist()[:5]}...")
    print()
    
    print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤:")
    hurst_mean = results['hurst_exponent'].mean()
    variance_ratio_mean = results['variance_ratio'].mean()
    correlation_mean = results['rolling_correlation'].mean()
    
    print(f"   - –°—Ä–µ–¥–Ω–∏–π Hurst Exponent: {hurst_mean:.3f}")
    print(f"   - –°—Ä–µ–¥–Ω–∏–π Variance Ratio: {variance_ratio_mean:.3f}")
    print(f"   - –°—Ä–µ–¥–Ω—è—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è: {correlation_mean:.3f}")
    print()
    
    print("üí∞ –¢–æ—Ä–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    print(f"   - –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {list(results.columns)}")
    
    total_pnl = results['pnl'].sum() if 'pnl' in results.columns else 0
    cumulative_pnl = results['cumulative_pnl'].iloc[-1] if 'cumulative_pnl' in results.columns else 0
    winning_periods = len(results[results['pnl'] > 0]) if 'pnl' in results.columns else 0
    
    print(f"   - –û–±—â–∏–π PnL: ${total_pnl:.2f}")
    print(f"   - –ö—É–º—É–ª—è—Ç–∏–≤–Ω—ã–π PnL: ${cumulative_pnl:.2f}")
    print(f"   - –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤: {winning_periods}/{len(results)} ({winning_periods/len(results)*100:.1f}%)")
    print()
    
    print("üí° –í–ª–∏—è–Ω–∏–µ –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏:")
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º, —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ —Ç–æ—Ä–≥–æ–≤–ª—è –±—ã–ª–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞ –∏–∑-–∑–∞ —Ä–µ–∂–∏–º–æ–≤
    trend_periods = len(results[results['market_regime'] == 'trending'])
    break_periods = len(results[results['structural_break_detected']])
    
    print(f"   - –ü–µ—Ä–∏–æ–¥–æ–≤ —Å —Ç—Ä–µ–Ω–¥–æ–≤—ã–º —Ä–µ–∂–∏–º–æ–º (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è): {trend_periods}")
    print(f"   - –ü–µ—Ä–∏–æ–¥–æ–≤ —Å–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–º–∏ —Å–¥–≤–∏–≥–∞–º–∏: {break_periods}")
    print(f"   - –û–±—â–µ–µ –≤–ª–∏—è–Ω–∏–µ –Ω–∞ —Ç–æ—Ä–≥–æ–≤–ª—é: {(trend_periods + break_periods)/len(results)*100:.1f}% –ø–µ—Ä–∏–æ–¥–æ–≤")
    
    print("\nüéØ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")

if __name__ == "__main__":
    main()