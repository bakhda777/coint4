#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ memory-mapped –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ walk-forward –∞–Ω–∞–ª–∏–∑–∞.
"""

import sys
import os
from pathlib import Path
import time
import psutil
import pandas as pd

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É –∫–æ–¥—É
sys.path.insert(0, str(Path(__file__).parent / "src"))

from coint2.utils.config import load_config
from coint2.pipeline.walk_forward_orchestrator import run_walk_forward
from coint2.utils.logging_utils import get_logger

def monitor_memory():
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏."""
    process = psutil.Process()
    memory_info = process.memory_info()
    return {
        'rss_mb': memory_info.rss / 1024 / 1024,  # Resident Set Size
        'vms_mb': memory_info.vms / 1024 / 1024,  # Virtual Memory Size
        'percent': process.memory_percent()
    }

def test_memory_optimization():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ memory-mapped –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ (–±—ã—Å—Ç—Ä–∞—è –≤–µ—Ä—Å–∏—è)."""
    logger = get_logger("test_memory_opt")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config_path = Path("configs/main_2024.yaml")
    if not config_path.exists():
        logger.error(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {config_path}")
        return
    
    cfg = load_config(config_path)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
    if not cfg.data_dir.exists():
        logger.error(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {cfg.data_dir}")
        return
    
    # –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    original_end_date = cfg.walk_forward.end_date
    original_training_period = cfg.walk_forward.training_period_days
    original_testing_period = cfg.walk_forward.testing_period_days
    
    # –£–º–µ–Ω—å—à–∞–µ–º –ø–µ—Ä–∏–æ–¥ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ 30 –¥–Ω–µ–π
    from datetime import datetime, timedelta
    start_date = datetime.strptime(cfg.walk_forward.start_date, "%Y-%m-%d")
    cfg.walk_forward.end_date = (start_date + timedelta(days=30)).strftime("%Y-%m-%d")
    
    # –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –æ–∫–æ–Ω –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
    cfg.walk_forward.training_period_days = min(cfg.walk_forward.training_period_days, 14)
    cfg.walk_forward.testing_period_days = min(cfg.walk_forward.testing_period_days, 7)
    
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ memory-mapped –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ (–±—ã—Å—Ç—Ä–∞—è –≤–µ—Ä—Å–∏—è)")
    logger.info(f"üìÅ –î–∞–Ω–Ω—ã–µ: {cfg.data_dir}")
    logger.info(f"üìÖ –ü–µ—Ä–∏–æ–¥: {cfg.walk_forward.start_date} ‚Üí {cfg.walk_forward.end_date} (—Å–æ–∫—Ä–∞—â–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)")
    logger.info(f"ü™ü –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞: {cfg.walk_forward.training_period_days} –¥–Ω–µ–π, —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {cfg.walk_forward.testing_period_days} –¥–Ω–µ–π")
    
    # –¢–µ—Å—Ç 1: –¢—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ (—Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏)
    logger.info("\nüîÑ –¢–µ—Å—Ç 1: –¢—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ (–±—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)")
    memory_before = monitor_memory()
    logger.info(f"üíæ –ü–∞–º—è—Ç—å –¥–æ –∑–∞–ø—É—Å–∫–∞: {memory_before['rss_mb']:.1f} MB")
    
    start_time = time.time()
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—É—é –∏—Ç–µ—Ä–∞—Ü–∏—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        results_traditional = run_walk_forward(cfg, use_memory_map=False, max_iterations=1)
        traditional_time = time.time() - start_time
        memory_after = monitor_memory()
        
        logger.info(f"‚úÖ –¢—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {traditional_time:.1f}—Å")
        logger.info(f"üíæ –ü–∞–º—è—Ç—å –ø–æ—Å–ª–µ: {memory_after['rss_mb']:.1f} MB (+{memory_after['rss_mb'] - memory_before['rss_mb']:.1f} MB)")
        logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: P&L = ${results_traditional.get('total_pnl', 0):+,.2f}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–æ–º –º–µ—Ç–æ–¥–µ: {e}")
        results_traditional = None
        traditional_time = None
    
    # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ø–∞–º—è—Ç–∏
    time.sleep(1)
    
    # –¢–µ—Å—Ç 2: Memory-mapped –º–µ—Ç–æ–¥ (–±—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
    logger.info("\nüß† –¢–µ—Å—Ç 2: Memory-mapped –º–µ—Ç–æ–¥ (–±—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)")
    memory_before = monitor_memory()
    logger.info(f"üíæ –ü–∞–º—è—Ç—å –¥–æ –∑–∞–ø—É—Å–∫–∞: {memory_before['rss_mb']:.1f} MB")
    
    start_time = time.time()
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—É—é –∏—Ç–µ—Ä–∞—Ü–∏—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        results_mmap = run_walk_forward(cfg, use_memory_map=True, max_iterations=1)
        mmap_time = time.time() - start_time
        memory_after = monitor_memory()
        
        logger.info(f"‚úÖ Memory-mapped –º–µ—Ç–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {mmap_time:.1f}—Å")
        logger.info(f"üíæ –ü–∞–º—è—Ç—å –ø–æ—Å–ª–µ: {memory_after['rss_mb']:.1f} MB (+{memory_after['rss_mb'] - memory_before['rss_mb']:.1f} MB)")
        logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: P&L = ${results_mmap.get('total_pnl', 0):+,.2f}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ memory-mapped –º–µ—Ç–æ–¥–µ: {e}")
        results_mmap = None
        mmap_time = None
    
    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    cfg.walk_forward.end_date = original_end_date
    cfg.walk_forward.training_period_days = original_training_period
    cfg.walk_forward.testing_period_days = original_testing_period
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    logger.info("\nüìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:")
    
    if traditional_time and mmap_time:
        speedup = traditional_time / mmap_time
        logger.info(f"‚è±Ô∏è –£—Å–∫–æ—Ä–µ–Ω–∏–µ: {speedup:.2f}x ({traditional_time:.1f}—Å ‚Üí {mmap_time:.1f}—Å)")
        
        if speedup > 1.1:
            logger.info("üöÄ Memory-mapped –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–æ–∫–∞–∑–∞–ª–∞ —É–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏!")
        elif speedup > 0.9:
            logger.info("‚öñÔ∏è –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–∏–º–µ—Ä–Ω–æ –æ–¥–∏–Ω–∞–∫–æ–≤–∞—è")
        else:
            logger.info("‚ÑπÔ∏è Memory-mapped –º–µ—Ç–æ–¥ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–¥–ª–µ–Ω–Ω–µ–µ –Ω–∞ –º–∞–ª—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    
    if results_traditional and results_mmap:
        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        pnl_diff = abs(results_traditional.get('total_pnl', 0) - results_mmap.get('total_pnl', 0))
        if pnl_diff < 0.01:  # –†–∞–∑–Ω–∏—Ü–∞ –º–µ–Ω–µ–µ 1 —Ü–µ–Ω—Ç–∞
            logger.info("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–¥–µ–Ω—Ç–∏—á–Ω—ã - –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        else:
            logger.warning(f"‚ö†Ô∏è –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç–ª–∏—á–∞—é—Ç—Å—è –Ω–∞ ${pnl_diff:.2f}")
            logger.info("‚ÑπÔ∏è –ù–µ–±–æ–ª—å—à–∏–µ —Ä–∞–∑–ª–∏—á–∏—è –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω—ã–º–∏ –ø—Ä–∏ —Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏")
    
    logger.info("\nüéâ –ë—ã—Å—Ç—Ä–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    logger.info("‚ÑπÔ∏è –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å –ø–æ–ª–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")

if __name__ == "__main__":
    test_memory_optimization()