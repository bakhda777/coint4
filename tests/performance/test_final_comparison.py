"""–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –¥–æ—Å—Ç–∏–≥–Ω—É—Ç—ã—Ö –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π."""

import time
import numpy as np
import pandas as pd
from statsmodels.tsa.stattools import coint

from coint2.core.fast_coint import fast_coint


def final_comparison_test():
    """–§–∏–Ω–∞–ª—å–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –¥–æ—Å—Ç–∏–≥–Ω—É—Ç—ã—Ö —É–ª—É—á—à–µ–Ω–∏–π."""
    print("üèÜ –§–ò–ù–ê–õ–¨–ù–û–ï –°–†–ê–í–ù–ï–ù–ò–ï FAST_COINT –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ô")
    print("=" * 65)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    test_scenarios = [
        {"name": "–ú–∞–ª—ã–µ –¥–∞–Ω–Ω—ã–µ", "n_pairs": 20, "n_obs": 200},
        {"name": "–°—Ä–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ", "n_pairs": 50, "n_obs": 400},
        {"name": "–ë–æ–ª—å—à–∏–µ –¥–∞–Ω–Ω—ã–µ", "n_pairs": 100, "n_obs": 600}
    ]
    
    overall_results = []
    
    for scenario in test_scenarios:
        print(f"\nüìä –°–¶–ï–ù–ê–†–ò–ô: {scenario['name']}")
        print(f"   –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {scenario['n_pairs']} –ø–∞—Ä √ó {scenario['n_obs']} –Ω–∞–±–ª—é–¥–µ–Ω–∏–π")
        print("-" * 50)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        np.random.seed(42)  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π seed –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏
        pairs = []
        
        for i in range(scenario['n_pairs']):
            x = np.random.normal(0, 1, scenario['n_obs']).cumsum()
            y = np.random.normal(0, 1, scenario['n_obs']).cumsum()
            
            # –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–∞—Ä—ã –¥–µ–ª–∞–µ–º –∫–æ–∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏
            if i % 4 == 0:
                beta = np.random.uniform(0.5, 2.0)
                noise = np.random.normal(0, 0.1, scenario['n_obs'])
                y = beta * x + noise
            
            pairs.append((pd.Series(x), pd.Series(y)))
        
        # === –¢–ï–°–¢ STATSMODELS ===
        print("‚è±Ô∏è  statsmodels.coint...")
        start_time = time.time()
        stats_results = []
        for x, y in pairs:
            try:
                tau, pvalue, _ = coint(x, y, trend='n')
                stats_results.append((tau, pvalue))
            except:
                stats_results.append((np.nan, np.nan))
        stats_time = time.time() - start_time
        print(f"   –í—Ä–µ–º—è: {stats_time:.3f} —Å–µ–∫")
        
        # === –¢–ï–°–¢ FAST_COINT ===
        print("‚ö° fast_coint (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è)...")
        # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∫–æ–º–ø–∏–ª—è—Ü–∏—è
        _ = fast_coint(np.array([1.0, 2.0, 3.0]), np.array([4.0, 5.0, 6.0]))
        
        start_time = time.time()
        fast_results = []
        lags_used = []
        for x, y in pairs:
            try:
                tau, pvalue, k = fast_coint(x, y, trend='n')
                fast_results.append((tau, pvalue))
                lags_used.append(k)
            except:
                fast_results.append((np.nan, np.nan))
                lags_used.append(0)
        fast_time = time.time() - start_time
        print(f"   –í—Ä–µ–º—è: {fast_time:.3f} —Å–µ–∫")
        
        # === –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í ===
        speedup = stats_time / fast_time
        
        # –¢–æ—á–Ω–æ—Å—Ç—å
        tau_diffs = []
        pval_diffs = []
        for (tau_s, pval_s), (tau_f, pval_f) in zip(stats_results, fast_results):
            if not (np.isnan(tau_s) or np.isnan(tau_f)):
                tau_diffs.append(abs(tau_s - tau_f))
            if not (np.isnan(pval_s) or np.isnan(pval_f)):
                pval_diffs.append(abs(pval_s - pval_f))
        
        avg_lag = np.mean([k for k in lags_used if k > 0]) if any(k > 0 for k in lags_used) else 0
        unique_lags = len(set(lags_used))
        
        print(f"üìà –£—Å–∫–æ—Ä–µ–Ω–∏–µ: {speedup:.1f}x")
        print(f"üéØ –°—Ä–µ–¥–Ω—è—è —Ä–∞–∑–Ω–æ—Å—Ç—å p-value: {np.mean(pval_diffs):.6f}")
        print(f"üìä –°—Ä–µ–¥–Ω–∏–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ª–∞–≥: {avg_lag:.1f}")
        print(f"üîÑ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ª–∞–≥–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {unique_lags}")
        print(f"üíæ –≠–∫–æ–Ω–æ–º–∏—è –≤—Ä–µ–º–µ–Ω–∏: {stats_time - fast_time:.2f} —Å–µ–∫")
        
        overall_results.append({
            'scenario': scenario['name'],
            'speedup': speedup,
            'time_saved': stats_time - fast_time,
            'accuracy': np.mean(pval_diffs) if pval_diffs else 0,
            'avg_lag': avg_lag,
            'unique_lags': unique_lags
        })
    
    # === –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===
    print(f"\nüèÜ –û–ë–©–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò:")
    print("=" * 65)
    
    total_speedup = np.mean([r['speedup'] for r in overall_results])
    total_time_saved = sum([r['time_saved'] for r in overall_results])
    avg_accuracy = np.mean([r['accuracy'] for r in overall_results])
    
    print(f"üìä –°—Ä–µ–¥–Ω–µ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ –ø–æ –≤—Å–µ–º —Å—Ü–µ–Ω–∞—Ä–∏—è–º: {total_speedup:.1f}x")
    print(f"‚è∞ –û–±—â–∞—è —ç–∫–æ–Ω–æ–º–∏—è –≤—Ä–µ–º–µ–Ω–∏: {total_time_saved:.2f} —Å–µ–∫")
    print(f"üéØ –°—Ä–µ–¥–Ω—è—è —Ç–æ—á–Ω–æ—Å—Ç—å p-value: {avg_accuracy:.6f}")
    print()
    
    # === –ö–õ–Æ–ß–ï–í–´–ï –î–û–°–¢–ò–ñ–ï–ù–ò–Ø ===
    print("üéâ –ö–õ–Æ–ß–ï–í–´–ï –î–û–°–¢–ò–ñ–ï–ù–ò–Ø:")
    print("-" * 30)
    print("‚úÖ –ó–∞–º–µ–Ω–∞ statsmodels.coint –Ω–∞ —É—Å–∫–æ—Ä–µ–Ω–Ω—É—é Numba-–≤–µ—Ä—Å–∏—é")
    print("‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ —Å k=2")
    print("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è AIC-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –≤—ã–±–æ—Ä–∞ –ª–∞–≥–æ–≤")
    print("‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ API")
    print("‚úÖ –û—Ç–ª–∏—á–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å –¥–ª—è –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è")
    print()
    
    # === –ü–†–ê–ö–¢–ò–ß–ï–°–ö–ê–Ø –ü–û–õ–¨–ó–ê ===
    print("üíº –ü–†–ê–ö–¢–ò–ß–ï–°–ö–ê–Ø –ü–û–õ–¨–ó–ê:")
    print("-" * 25)
    print(f"‚Ä¢ –ü—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ 1000 –ø–∞—Ä —ç–∫–æ–Ω–æ–º–∏—è: ~{total_time_saved * 10:.0f} —Å–µ–∫")
    print(f"‚Ä¢ –ü—Ä–∏ walk-forward —Å 500 –ø–∞—Ä: ~{total_time_saved * 5:.0f} —Å–µ–∫ —ç–∫–æ–Ω–æ–º–∏–∏")
    print("‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –±–æ–ª—å—à–µ –ø–∞—Ä –∑–∞ —Ç–æ –∂–µ –≤—Ä–µ–º—è")
    print("‚Ä¢ –ë—ã—Å—Ç—Ä–∞—è –∏—Ç–µ—Ä–∞—Ü–∏—è –ø—Ä–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π")
    print("‚Ä¢ –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å –Ω–∞ –±–æ–ª—å—à–∏–µ –¥–∞—Ç–∞—Å–µ—Ç—ã")
    print()
    
    # === –¢–ï–•–ù–ò–ß–ï–°–ö–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø ===
    print("üîß –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –î–ï–¢–ê–õ–ò:")
    print("-" * 25)
    print("‚Ä¢ Numba JIT-–∫–æ–º–ø–∏–ª—è—Ü–∏—è —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π")
    print("‚Ä¢ –ü–∞—Ä–∞–ª–ª–µ–ª–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ prange")
    print("‚Ä¢ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏")
    print("‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ª–∏–Ω–µ–π–Ω–∞—è –∞–ª–≥–µ–±—Ä–∞")
    print("‚Ä¢ AIC-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –±–µ–∑ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π")
    print()
    
    print(f"üöÄ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
    print(f"üìà –û–±—â–µ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ: {total_speedup:.1f}x")
    
    return overall_results


if __name__ == "__main__":
    final_comparison_test() 