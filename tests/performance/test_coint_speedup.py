"""–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —É—Å–∫–æ—Ä–µ–Ω–∏—è cointegration test."""

import time
import numpy as np
import pandas as pd
from statsmodels.tsa.stattools import coint

from coint2.core.fast_coint import fast_coint


def generate_test_pairs(n_pairs=100, n_observations=500):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–∞—Ä—ã –¥–ª—è –±–µ–Ω—á–º–∞—Ä–∫–∞."""
    np.random.seed(42)
    pairs = []
    
    for i in range(n_pairs):
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –±–ª—É–∂–¥–∞–Ω–∏—è
        x = np.random.normal(0, 1, n_observations).cumsum()
        y = np.random.normal(0, 1, n_observations).cumsum()
        
        # –ò–Ω–æ–≥–¥–∞ –¥–µ–ª–∞–µ–º –ø–∞—Ä—ã –∫–æ–∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏
        if i % 3 == 0:
            # –°–æ–∑–¥–∞–µ–º –∫–æ–∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –ø–∞—Ä—É
            beta = np.random.uniform(0.5, 2.0)
            noise = np.random.normal(0, 0.1, n_observations)
            y = beta * x + noise
        
        pairs.append((
            pd.Series(x, name=f'X_{i}'),
            pd.Series(y, name=f'Y_{i}')
        ))
    
    return pairs


def benchmark_statsmodels(pairs):
    """–ë–µ–Ω—á–º–∞—Ä–∫ statsmodels.coint."""
    start_time = time.time()
    results = []
    
    for x, y in pairs:
        try:
            tau, pvalue, _ = coint(x, y, trend='n')
            results.append((tau, pvalue))
        except Exception:
            results.append((np.nan, np.nan))
    
    end_time = time.time()
    return results, end_time - start_time


def benchmark_fast_coint(pairs):
    """–ë–µ–Ω—á–º–∞—Ä–∫ fast_coint."""
    # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∫–æ–º–ø–∏–ª—è—Ü–∏—è
    _ = fast_coint(np.array([1.0, 2.0, 3.0]), np.array([4.0, 5.0, 6.0]))
    
    start_time = time.time()
    results = []
    
    for x, y in pairs:
        try:
            tau, pvalue, _ = fast_coint(x, y, trend='n')
            results.append((tau, pvalue))
        except Exception:
            results.append((np.nan, np.nan))
    
    end_time = time.time()
    return results, end_time - start_time


def compare_accuracy(results_stats, results_fast):
    """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Ç–æ—á–Ω–æ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤."""
    tau_diffs = []
    pval_diffs = []
    
    for (tau_s, pval_s), (tau_f, pval_f) in zip(results_stats, results_fast):
        if not (np.isnan(tau_s) or np.isnan(tau_f)):
            tau_diffs.append(abs(tau_s - tau_f))
        if not (np.isnan(pval_s) or np.isnan(pval_f)):
            pval_diffs.append(abs(pval_s - pval_f))
    
    return tau_diffs, pval_diffs


def test_coint_speedup_demo():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —É—Å–∫–æ—Ä–µ–Ω–∏—è cointegration test."""
    print("üöÄ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –£–°–ö–û–†–ï–ù–ò–Ø COINTEGRATION TEST")
    print("=" * 60)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    n_pairs = 50  # –ú–µ–Ω—å—à–µ –ø–∞—Ä –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∞
    n_obs = 300
    
    print(f"üìä –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º {n_pairs} –ø–∞—Ä —Å {n_obs} –Ω–∞–±–ª—é–¥–µ–Ω–∏—è–º–∏ –∫–∞–∂–¥–∞—è...")
    pairs = generate_test_pairs(n_pairs, n_obs)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º statsmodels
    print("‚è±Ô∏è  –¢–µ—Å—Ç–∏—Ä—É–µ–º statsmodels.coint...")
    results_stats, time_stats = benchmark_statsmodels(pairs)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º fast_coint
    print("‚è±Ô∏è  –¢–µ—Å—Ç–∏—Ä—É–µ–º fast_coint...")
    results_fast, time_fast = benchmark_fast_coint(pairs)
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ—á–Ω–æ—Å—Ç—å
    tau_diffs, pval_diffs = compare_accuracy(results_stats, results_fast)
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\nüìà –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print("-" * 40)
    print(f"statsmodels –≤—Ä–µ–º—è:  {time_stats:.3f} —Å–µ–∫")
    print(f"fast_coint –≤—Ä–µ–º—è:   {time_fast:.3f} —Å–µ–∫")
    print(f"–£—Å–∫–æ—Ä–µ–Ω–∏–µ:          {time_stats/time_fast:.1f}x")
    print()
    print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–∞—Ä:     {len(pairs)}")
    print(f"–°—Ä–µ–¥–Ω—è—è —Ä–∞–∑–Ω–æ—Å—Ç—å tau:    {np.mean(tau_diffs):.6f}")
    print(f"–°—Ä–µ–¥–Ω—è—è —Ä–∞–∑–Ω–æ—Å—Ç—å p-val:  {np.mean(pval_diffs):.6f}")
    print(f"–ú–∞–∫—Å —Ä–∞–∑–Ω–æ—Å—Ç—å tau:       {np.max(tau_diffs):.6f}")
    print(f"–ú–∞–∫—Å —Ä–∞–∑–Ω–æ—Å—Ç—å p-val:     {np.max(pval_diffs):.6f}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É—Å–∫–æ—Ä–µ–Ω–∏–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ
    speedup = time_stats / time_fast
    assert speedup > 2, f"–£—Å–∫–æ—Ä–µ–Ω–∏–µ {speedup:.1f}x –º–µ–Ω—å—à–µ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ (>2x)"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ—Å—Ç—å (–¥–ª—è –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö —Ü–µ–ª–µ–π —Ç–æ—Ä–≥–æ–≤–ª–∏)
    assert np.mean(pval_diffs) < 0.1, f"–°—Ä–µ–¥–Ω—è—è —Ä–∞–∑–Ω–æ—Å—Ç—å p-value ({np.mean(pval_diffs):.6f}) —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è"
    
    print("\n‚úÖ –¢–µ—Å—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!")
    print(f"‚úÖ –î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ —É—Å–∫–æ—Ä–µ–Ω–∏–µ –≤ {speedup:.1f}x —Ä–∞–∑")
    print("‚úÖ –¢–æ—á–Ω–æ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–∏–µ–º–ª–µ–º–∞ –¥–ª—è –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è")


if __name__ == "__main__":
    test_coint_speedup_demo() 