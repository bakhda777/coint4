"""–ü–æ–ª–Ω–∞—è Numba-–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è PairBacktester —Å –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞."""

import numpy as np
import pandas as pd
from typing import Optional
from dataclasses import dataclass

from ..core.numba_backtest_full import (
    rolling_ols, 
    calculate_positions_and_pnl_full
)
from .backtest_engine import PairBacktester


@dataclass
class FullNumbaBacktestResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª–Ω–æ–≥–æ Numba –±—ç–∫—Ç–µ—Å—Ç–∞."""
    spread: np.ndarray
    z_scores: np.ndarray
    positions: np.ndarray
    trades_series: np.ndarray
    pnl_series: np.ndarray
    total_pnl: float
    beta: np.ndarray
    mu: np.ndarray
    sigma: np.ndarray


class FullNumbaPairBacktester(PairBacktester):
    
    def _validate_parameters(self) -> None:
        """Override validation to handle edge cases more gracefully."""
        # Skip validation for empty data or very short data
        if self.pair_data.empty or len(self.pair_data) < 3:
            return
        
        # For short data, just warn but don't raise error
        if len(self.pair_data) < self.rolling_window + 2:
            import warnings
            warnings.warn(
                f"Data length ({len(self.pair_data)}) is less than recommended "
                f"minimum ({self.rolling_window + 2}). Results may be limited.",
                UserWarning
            )
            return
            
        # Override the parent's rolling window validation for edge cases
        if self.rolling_window > len(self.pair_data) // 2:
            import warnings
            warnings.warn(
                f"rolling_window ({self.rolling_window}) is large relative to data size ({len(self.pair_data)}). "
                f"Results may be limited.",
                UserWarning
            )
            return
        
        # Call parent validation for normal cases
        super()._validate_parameters()
    """–ü–æ–ª–Ω–∞—è Numba-–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è PairBacktester.
    
    –≠—Ç–∞ –≤–µ—Ä—Å–∏—è –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ–≤—Ç–æ—Ä—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ PairBacktester,
    –≤–∫–ª—é—á–∞—è:
    - –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤ (Hurst Exponent, Variance Ratio)
    - –ó–∞—â–∏—Ç—É –æ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã—Ö —Å–¥–≤–∏–≥–æ–≤ (–∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è, –ø–æ–ª—É–ø–µ—Ä–∏–æ–¥, ADF —Ç–µ—Å—Ç)
    - –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ø–æ—Ä–æ–≥–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
    - –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Ç–æ–ø-–ª–æ—Å—Å—ã
    - –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Å—Ç–æ–ø-–ª–æ—Å—Å—ã
    - –ü–æ–ª–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã—Ö –∏–∑–¥–µ—Ä–∂–µ–∫
    
    –ü—Ä–∏ —ç—Ç–æ–º –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ –∑–∞ —Å—á–µ—Ç Numba JIT –∫–æ–º–ø–∏–ª—è—Ü–∏–∏.
    """
    
    def __init__(self, *args, **kwargs):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å —Ç–µ–º–∏ –∂–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏, —á—Ç–æ –∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π PairBacktester."""
        super().__init__(*args, **kwargs)
        
    def run_numba_full(self) -> FullNumbaBacktestResult:
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ Numba –±—ç–∫—Ç–µ—Å—Ç–∞ —Å –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞.
        
        Returns:
            FullNumbaBacktestResult: –ü–æ–ª–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—ç–∫—Ç–µ—Å—Ç–∞
        """
        if self.pair_data.empty or len(self.pair_data.columns) < 2:
            n = len(self.pair_data) if not self.pair_data.empty else 0
            return FullNumbaBacktestResult(
                spread=np.full(n, np.nan, dtype=np.float32),
                z_scores=np.full(n, np.nan, dtype=np.float32),
                positions=np.zeros(n, dtype=np.float32),
                trades_series=np.zeros(n, dtype=np.float32),
                pnl_series=np.zeros(n, dtype=np.float32),
                total_pnl=0.0,
                beta=np.full(n, np.nan, dtype=np.float32),
                mu=np.full(n, np.nan, dtype=np.float32),
                sigma=np.full(n, np.nan, dtype=np.float32)
            )
        
        # Check for minimum data length requirement
        n = len(self.pair_data)
        min_required_length = self.rolling_window + 10
        if n < min_required_length:
            return FullNumbaBacktestResult(
                spread=np.full(n, np.nan, dtype=np.float32),
                z_scores=np.full(n, np.nan, dtype=np.float32),
                positions=np.zeros(n, dtype=np.float32),
                trades_series=np.zeros(n, dtype=np.float32),
                pnl_series=np.zeros(n, dtype=np.float32),
                total_pnl=0.0,
                beta=np.full(n, np.nan, dtype=np.float32),
                mu=np.full(n, np.nan, dtype=np.float32),
                sigma=np.full(n, np.nan, dtype=np.float32)
            )
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ float32 numpy –º–∞—Å—Å–∏–≤—ã
        y = self.pair_data.iloc[:, 0].values.astype(np.float32)
        x = self.pair_data.iloc[:, 1].values.astype(np.float32)
        
        # –ë—ã—Å—Ç—Ä—ã–π rolling OLS
        beta, mu, sigma = rolling_ols(y, x, self.rolling_window)
        
        # –ü–æ–ª–Ω—ã–π —Ä–∞—Å—á–µ—Ç –ø–æ–∑–∏—Ü–∏–π –∏ PnL —Å –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏
        positions, pnl_series, cumulative_pnl = calculate_positions_and_pnl_full(
            y=y,
            x=x,
            rolling_window=self.rolling_window,
            entry_threshold=self.z_threshold,
            exit_threshold=self.z_exit,
            commission=self.commission_pct,
            slippage=self.slippage_pct,
            max_holding_period=getattr(self, 'max_holding_period', 100),
            enable_regime_detection=getattr(self, 'market_regime_detection', True),
            enable_structural_breaks=getattr(self, 'structural_break_protection', True),
            min_volatility=getattr(self, 'min_volatility', 0.001),
            adaptive_threshold_factor=getattr(self, 'adaptive_threshold_factor', 1.0)
        )
        
        # Calculate spread and z_scores for compatibility
        spread = np.zeros(len(y), dtype=np.float32)
        z_scores = np.zeros(len(y), dtype=np.float32)
        trades_series = np.zeros(len(y), dtype=np.float32)
        
        for i in range(self.rolling_window, len(y)):
            if not np.isnan(beta[i]) and not np.isnan(mu[i]) and not np.isnan(sigma[i]):
                spread[i] = y[i] - beta[i] * x[i]
                z_scores[i] = (spread[i] - mu[i]) / max(sigma[i], 0.001)
                
                # Mark trade points where position changes
                if i > 0 and positions[i] != positions[i-1]:
                    trades_series[i] = 1.0
        
        total_pnl = cumulative_pnl[-1] if len(cumulative_pnl) > 0 else 0.0
        
        return FullNumbaBacktestResult(
            spread=spread,
            z_scores=z_scores,
            positions=positions,
            trades_series=trades_series,
            pnl_series=pnl_series,
            total_pnl=total_pnl,
            beta=beta,
            mu=mu,
            sigma=sigma
        )
    
    def run(self) -> None:
        """–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–æ–¥ run –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–æ–ª–Ω–æ–π Numba –≤–µ—Ä—Å–∏–∏.
        
        –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –∑–∞–º–µ–Ω—è–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π run() –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–æ–ª–Ω—É—é Numba —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é
        —Å–æ –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞.
        """
        import logging
        logger = logging.getLogger(__name__)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞—Ä—ã
        logger.info(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω—ã–π Numba-–±—ç–∫—Ç–µ—Å—Ç –ø–∞—Ä—ã {getattr(self, 'pair_name', 'Unknown')} —Å {len(self.pair_data)} –ø–µ—Ä–∏–æ–¥–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—ã–π Numba –±—ç–∫—Ç–µ—Å—Ç
        numba_result = self.run_numba_full()
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∏–π DataFrame –≤ —Ç–æ–º –∂–µ —Ñ–æ—Ä–º–∞—Ç–µ, —á—Ç–æ –∏ –æ—Ä–∏–≥–∏–Ω–∞–ª
        if self.pair_data.empty:
            self.results = pd.DataFrame(
                columns=["spread", "z_score", "position", "pnl", "cumulative_pnl"]
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ PairBacktester
        results_data = {
            'spread': numba_result.spread,
            'z_score': numba_result.z_scores,
            'position': numba_result.positions,
            'pnl': numba_result.pnl_series,
            'cumulative_pnl': np.cumsum(numba_result.pnl_series),
            'beta': numba_result.beta,
            'mu': numba_result.mu,
            'sigma': numba_result.sigma,
            'trades': numba_result.trades_series
        }
        
        # –°–æ–∑–¥–∞–µ–º DataFrame —Å —Ç–µ–º –∂–µ –∏–Ω–¥–µ–∫—Å–æ–º, —á—Ç–æ –∏ –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        self.results = pd.DataFrame(results_data, index=self.pair_data.index)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        self.results['entry_price_s1'] = np.nan
        self.results['entry_price_s2'] = np.nan
        self.results['entry_z'] = np.nan
        self.results['entry_date'] = np.nan
        self.results['exit_reason'] = ''
        self.results['exit_price_s1'] = np.nan
        self.results['exit_price_s2'] = np.nan
        self.results['exit_z'] = np.nan
        self.results['trade_duration'] = np.nan
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–¥–µ–ª–∫–∞—Ö —Ç–∞–º, –≥–¥–µ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
        trade_indices = np.where(numba_result.trades_series != 0)[0]
        for idx in trade_indices:
            if idx < len(self.pair_data):
                self.results.iloc[idx, self.results.columns.get_loc('entry_price_s1')] = self.pair_data.iloc[idx, 0]
                self.results.iloc[idx, self.results.columns.get_loc('entry_price_s2')] = self.pair_data.iloc[idx, 1]
                self.results.iloc[idx, self.results.columns.get_loc('entry_z')] = numba_result.z_scores[idx]
                if isinstance(self.pair_data.index, pd.DatetimeIndex):
                    self.results.iloc[idx, self.results.columns.get_loc('entry_date')] = self.pair_data.index[idx]
                else:
                    self.results.iloc[idx, self.results.columns.get_loc('entry_date')] = float(idx)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_pnl = numba_result.total_pnl
        total_trades = np.sum(numba_result.trades_series > 0)
        logger.info(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω –ø–æ–ª–Ω—ã–π Numba-–±—ç–∫—Ç–µ—Å—Ç –ø–∞—Ä—ã {getattr(self, 'pair_name', 'Unknown')}: PnL={total_pnl:.4f}, –°–¥–µ–ª–æ–∫={total_trades}")
    
    def get_performance_summary(self) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.
        
        Returns:
            dict: –°–ª–æ–≤–∞—Ä—å —Å –∫–ª—é—á–µ–≤—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        """
        if self.results is None or self.results.empty:
            return {}
        
        # Ensure total_pnl is always numeric
        if len(self.results) > 0 and 'cumulative_pnl' in self.results.columns:
            total_pnl = self.results['cumulative_pnl'].iloc[-1]
            # Convert to float and handle NaN/inf values
            if pd.isna(total_pnl) or np.isinf(total_pnl):
                total_pnl = 0.0
            else:
                total_pnl = float(total_pnl)
        else:
            total_pnl = 0.0
        
        # –ë–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        metrics = {
            'total_pnl': total_pnl,
            'total_trades': len(self.results[self.results['trades'] != 0]),
            'winning_trades': len(self.results[self.results['pnl'] > 0]),
            'losing_trades': len(self.results[self.results['pnl'] < 0]),
        }
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        if metrics['total_trades'] > 0:
            metrics['win_rate'] = metrics['winning_trades'] / metrics['total_trades']
            
            winning_pnl = self.results[self.results['pnl'] > 0]['pnl']
            losing_pnl = self.results[self.results['pnl'] < 0]['pnl']
            
            if len(winning_pnl) > 0:
                metrics['avg_winning_trade'] = winning_pnl.mean()
                metrics['max_winning_trade'] = winning_pnl.max()
            
            if len(losing_pnl) > 0:
                metrics['avg_losing_trade'] = losing_pnl.mean()
                metrics['max_losing_trade'] = losing_pnl.min()
            
            # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –®–∞—Ä–ø–∞ (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–π)
            if len(self.results['pnl']) > 1:
                pnl_std = self.results['pnl'].std()
                if pnl_std > 0:
                    metrics['sharpe_ratio'] = self.results['pnl'].mean() / pnl_std * np.sqrt(252)  # –ê–Ω–Ω—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
        
        return metrics
    
    def compare_with_original(self, original_backtester: PairBacktester, 
                            tolerance: float = 0.01) -> dict:
        """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º –±—ç–∫—Ç–µ—Å—Ç–µ—Ä–æ–º.
        
        Args:
            original_backtester: –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π PairBacktester –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            tolerance: –î–æ–ø—É—Å—Ç–∏–º–∞—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å
            
        Returns:
            dict: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        """
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –±—ç–∫—Ç–µ—Å—Ç
        original_backtester.run()
        
        if (original_backtester.results is None or original_backtester.results.empty or
            self.results is None or self.results.empty):
            return {'error': 'One or both backtesters have empty results'}
        
        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        original_pnl = original_backtester.results['cumulative_pnl'].iloc[-1]
        numba_pnl = self.results['cumulative_pnl'].iloc[-1]
        
        pnl_diff = abs(numba_pnl - original_pnl)
        pnl_relative_error = pnl_diff / abs(original_pnl) if abs(original_pnl) > 1e-6 else pnl_diff
        
        comparison = {
            'original_pnl': original_pnl,
            'numba_pnl': numba_pnl,
            'pnl_difference': pnl_diff,
            'pnl_relative_error': pnl_relative_error,
            'within_tolerance': pnl_relative_error <= tolerance,
            'tolerance': tolerance
        }
        
        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫
        original_trades = len(original_backtester.results[original_backtester.results.get('trades', pd.Series()) != 0])
        numba_trades = len(self.results[self.results['trades'] != 0])
        
        comparison.update({
            'original_trades': original_trades,
            'numba_trades': numba_trades,
            'trades_difference': abs(numba_trades - original_trades)
        })
        
        return comparison