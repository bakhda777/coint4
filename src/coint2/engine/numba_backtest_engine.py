"""Numba-–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è PairBacktester."""

import numpy as np
import pandas as pd
from typing import Optional
from dataclasses import dataclass

from ..core.numba_backtest import (
    rolling_ols, 
    simulate_trades, 
    calculate_z_scores,
    calculate_positions_and_pnl
)
from .backtest_engine import PairBacktester


@dataclass
class NumbaBacktestResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç Numba-–±—ç–∫—Ç–µ—Å—Ç–∞."""
    total_pnl: float
    positions: np.ndarray
    pnl_series: np.ndarray
    trades_series: np.ndarray
    z_scores: np.ndarray
    beta: np.ndarray
    mu: np.ndarray
    sigma: np.ndarray
    spread: np.ndarray


class NumbaPairBacktester(PairBacktester):
    """Numba-–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è PairBacktester.
    
    –ù–∞—Å–ª–µ–¥—É–µ—Ç –æ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ PairBacktester –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏,
    –Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Numba-–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π.
    """
    
    def __init__(self, *args, **kwargs):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å —Ç–µ–º–∏ –∂–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏, —á—Ç–æ –∏ —É –±–∞–∑–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞."""
        super().__init__(*args, **kwargs)
        self.numba_result: Optional[NumbaBacktestResult] = None
        
    def run_numba(self) -> NumbaBacktestResult:
        """–ó–∞–ø—É—Å–∫ Numba-–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –±—ç–∫—Ç–µ—Å—Ç–∞.
        
        Returns
        -------
        NumbaBacktestResult
            –†–µ–∑—É–ª—å—Ç–∞—Ç –±—ç–∫—Ç–µ—Å—Ç–∞ —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏
        """
        if self.pair_data.empty or len(self.pair_data.columns) < 2:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –ø—É—Å—Ç—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            n = 0
            return NumbaBacktestResult(
                total_pnl=0.0,
                positions=np.array([]),
                pnl_series=np.array([]),
                trades_series=np.array([]),
                z_scores=np.array([]),
                beta=np.array([]),
                mu=np.array([]),
                sigma=np.array([]),
                spread=np.array([])
            )
            
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å—Ç—ã–µ —á–∏—Å–ª–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        y = self.pair_data.iloc[:, 0].to_numpy(dtype=np.float32, copy=False)
        x = self.pair_data.iloc[:, 1].to_numpy(dtype=np.float32, copy=False)
        
        # –ë—ã—Å—Ç—Ä—ã–π rolling OLS
        beta, mu, sigma = rolling_ols(y, x, self.rolling_window)
        
        # –†–∞—Å—á–µ—Ç spread
        spread = y - beta * x
        
        # –†–∞—Å—á–µ—Ç z-scores
        z_scores = calculate_z_scores(spread, mu, sigma)
        
        # –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∏ PnL
        positions, trades_series, pnl_series, total_pnl = calculate_positions_and_pnl(
            y, x, beta, mu, sigma,
            self.z_threshold, self.z_exit,
            self.commission_pct, self.slippage_pct
        )
        
        result = NumbaBacktestResult(
            total_pnl=total_pnl,
            positions=positions,
            pnl_series=pnl_series,
            trades_series=trades_series,
            z_scores=z_scores,
            beta=beta,
            mu=mu,
            sigma=sigma,
            spread=spread
        )
        
        self.numba_result = result
        return result
    
    def run(self) -> None:
        """–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ run, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–π Numba-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é.
        
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º,
        –Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –±—ã—Å—Ç—Ä—ã–µ Numba-—Ñ—É–Ω–∫—Ü–∏–∏.
        """
        import logging
        logger = logging.getLogger(__name__)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞—Ä—ã
        logger.info(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º Numba-–±—ç–∫—Ç–µ—Å—Ç –ø–∞—Ä—ã {self.pair_name or 'Unknown'} —Å {len(self.pair_data)} –ø–µ—Ä–∏–æ–¥–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º Numba-–≤–µ—Ä—Å–∏—é
        numba_result = self.run_numba()
        
        if self.pair_data.empty:
            self.results = pd.DataFrame(
                columns=["spread", "z_score", "position", "pnl", "cumulative_pnl"]
            )
            return
            
        # –°–æ–∑–¥–∞–µ–º DataFrame —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        df = self.pair_data.copy()
        df = df.rename(columns={
            df.columns[0]: "y",
            df.columns[1]: "x"
        })
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ Numba-—Ä–∞—Å—á–µ—Ç–æ–≤
        df["beta"] = numba_result.beta
        df["mean"] = numba_result.mu
        df["std"] = numba_result.sigma
        df["spread"] = numba_result.spread
        df["z_score"] = numba_result.z_scores
        df["position"] = numba_result.positions
        df["pnl"] = numba_result.pnl_series
        df["trades"] = numba_result.trades_series
        df["costs"] = 0.0  # –£–∂–µ —É—á—Ç–µ–Ω—ã –≤ pnl
        
        # –†–∞—Å—á–µ—Ç –∫—É–º—É–ª—è—Ç–∏–≤–Ω–æ–≥–æ PnL
        df["cumulative_pnl"] = df["pnl"].cumsum()
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        df["entry_price_s1"] = np.nan
        df["entry_price_s2"] = np.nan
        df["exit_price_s1"] = np.nan
        df["exit_price_s2"] = np.nan
        df["entry_z"] = np.nan
        df["exit_z"] = np.nan
        df["exit_reason"] = ""
        df["trade_duration"] = 0.0
        df["entry_date"] = pd.NaT if isinstance(df.index, pd.DatetimeIndex) else np.nan
        df["commission_costs"] = 0.0
        df["slippage_costs"] = 0.0
        df["bid_ask_costs"] = 0.0
        df["impact_costs"] = 0.0
        df["market_regime"] = "neutral"
        df["hurst_exponent"] = np.nan
        df["variance_ratio"] = np.nan
        df["rolling_correlation"] = np.nan
        df["half_life_estimate"] = np.nan
        df["adf_pvalue"] = np.nan
        df["structural_break_detected"] = False
        
        self.results = df
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_pnl = numba_result.total_pnl
        total_trades = np.sum(numba_result.trades_series > 0)
        logger.info(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω Numba-–±—ç–∫—Ç–µ—Å—Ç –ø–∞—Ä—ã {self.pair_name or 'Unknown'}: PnL={total_pnl:.4f}, –°–¥–µ–ª–æ–∫={total_trades}")
        
    def get_performance_metrics(self) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.
        
        Returns
        -------
        dict
            –°–ª–æ–≤–∞—Ä—å —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        """
        if self.numba_result is None:
            return {}
            
        result = self.numba_result
        
        # –ë–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        total_pnl = result.total_pnl
        total_trades = np.sum(result.trades_series > 0)
        
        # –†–∞—Å—á–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
        pnl_series = result.pnl_series[~np.isnan(result.pnl_series)]
        
        if len(pnl_series) > 0:
            sharpe_ratio = np.mean(pnl_series) / np.std(pnl_series) if np.std(pnl_series) > 0 else 0
            max_drawdown = self._calculate_max_drawdown(np.cumsum(pnl_series))
        else:
            sharpe_ratio = 0
            max_drawdown = 0
            
        return {
            'total_pnl': total_pnl,
            'total_trades': total_trades,
            'sharpe_ratio': sharpe_ratio,
            'max_drawdown': max_drawdown,
            'avg_pnl_per_trade': total_pnl / max(total_trades, 1)
        }
        
    def _calculate_max_drawdown(self, cumulative_pnl: np.ndarray) -> float:
        """–†–∞—Å—á–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ—Å–∞–¥–∫–∏.
        
        Parameters
        ----------
        cumulative_pnl : np.ndarray
            –ö—É–º—É–ª—è—Ç–∏–≤–Ω—ã–π PnL
            
        Returns
        -------
        float
            –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞
        """
        if len(cumulative_pnl) == 0:
            return 0.0
            
        peak = np.maximum.accumulate(cumulative_pnl)
        drawdown = peak - cumulative_pnl
        return np.max(drawdown)
        
    def compare_with_original(self, tolerance: float = 1e-6) -> dict:
        """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ Numba-–≤–µ—Ä—Å–∏–∏ —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π.
        
        Parameters
        ----------
        tolerance : float
            –î–æ–ø—É—Å—Ç–∏–º–∞—è –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            
        Returns
        -------
        dict
            –†–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        """
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º Numba —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        numba_result = self.numba_result
        numba_pnl = numba_result.total_pnl if numba_result else 0.0
        
        # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–ª—è —á–µ—Å—Ç–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        original_market_regime = self.market_regime_detection
        original_structural_break = self.structural_break_protection
        
        self.market_regime_detection = False
        self.structural_break_protection = False
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é
            super().run()
            original_pnl = self.results['pnl'].sum() if self.results is not None else 0.0
            
            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            pnl_diff = abs(numba_pnl - original_pnl)
            is_equivalent = pnl_diff <= tolerance
            
            return {
                'numba_pnl': numba_pnl,
                'original_pnl': original_pnl,
                'difference': pnl_diff,
                'is_equivalent': is_equivalent,
                'relative_error': pnl_diff / max(abs(original_pnl), 1e-8)
            }
            
        finally:
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            self.market_regime_detection = original_market_regime
            self.structural_break_protection = original_structural_break
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Numba —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            self.numba_result = numba_result